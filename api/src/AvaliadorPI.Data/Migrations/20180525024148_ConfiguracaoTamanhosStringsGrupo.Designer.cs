// <auto-generated />
using AvaliadorPI.Data.Context;
using AvaliadorPI.Domain.RootAvaliacao;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace AvaliadorPI.Data.Migrations
{
    [DbContext(typeof(AvaliadorPIContext))]
    [Migration("20180525024148_ConfiguracaoTamanhosStringsGrupo")]
    partial class ConfiguracaoTamanhosStringsGrupo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AvaliadorPI.Domain.Associacoes.AssociacaoAlunoGrupo", b =>
                {
                    b.Property<Guid>("AlunoId");

                    b.Property<Guid>("GrupoId");

                    b.HasKey("AlunoId", "GrupoId");

                    b.HasIndex("GrupoId");

                    b.ToTable("AssociacaoAlunoGrupo");
                });

            modelBuilder.Entity("AvaliadorPI.Domain.Associacoes.AssociacaoDisciplinaProfessor", b =>
                {
                    b.Property<Guid>("DisciplinaId");

                    b.Property<Guid>("ProfessorId");

                    b.HasKey("DisciplinaId", "ProfessorId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("AssociacaoDisciplinaProfessor");
                });

            modelBuilder.Entity("AvaliadorPI.Domain.Associacoes.AssociacaoDisciplinaProjeto", b =>
                {
                    b.Property<Guid>("DisciplinaId");

                    b.Property<Guid>("ProjetoId");

                    b.HasKey("DisciplinaId", "ProjetoId");

                    b.HasIndex("ProjetoId");

                    b.ToTable("AssociacaoDisciplinaProjeto");
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootAdministrador.Administrador", b =>
                {
                    b.Property<Guid>("Id");

                    b.HasKey("Id");

                    b.ToTable("Administrador");
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootAluno.Aluno", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Matricula");

                    b.ToTable("Aluno");
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootAvaliacao.Avaliacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AlunoId");

                    b.Property<Guid>("AvaliadorId");

                    b.Property<Guid>("CriterioId");

                    b.Property<DateTime>("Data");

                    b.Property<Guid?>("GrupoId");

                    b.Property<int>("Nota");

                    b.Property<byte>("Tipo");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("AvaliadorId");

                    b.HasIndex("CriterioId");

                    b.HasIndex("GrupoId");

                    b.ToTable("Avaliacao");
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootAvaliador.Avaliador", b =>
                {
                    b.Property<Guid>("Id");

                    b.HasKey("Id");

                    b.ToTable("Avaliador");
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootCriterio.Criterio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<byte>("Ordem");

                    b.Property<byte>("Peso");

                    b.Property<Guid>("ProjetoId");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.ToTable("Criterio");
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootDisciplina.Disciplina", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Disciplina");
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootGrupo.Grupo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NomeProjeto")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("ProjetoId");

                    b.Property<byte[]>("QRCode");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.ToTable("Grupo");
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootProfessor.Professor", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Matricula");

                    b.ToTable("Professor");
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootProjeto.Projeto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<string>("Periodo");

                    b.Property<Guid>("ProfessorId");

                    b.Property<string>("Tema");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Projeto");
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootUsuario.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SobreNome")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("AvaliadorPI.Domain.Associacoes.AssociacaoAlunoGrupo", b =>
                {
                    b.HasOne("AvaliadorPI.Domain.RootAluno.Aluno", "Aluno")
                        .WithMany("AssociacaoAlunoGrupo")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AvaliadorPI.Domain.RootGrupo.Grupo", "Grupo")
                        .WithMany("AssociacaoAlunoGrupo")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvaliadorPI.Domain.Associacoes.AssociacaoDisciplinaProfessor", b =>
                {
                    b.HasOne("AvaliadorPI.Domain.RootDisciplina.Disciplina", "Disciplina")
                        .WithMany("AssociacaoDisciplinaProfessor")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AvaliadorPI.Domain.RootProfessor.Professor", "Professor")
                        .WithMany("AssociacaoDisciplinaProfessor")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvaliadorPI.Domain.Associacoes.AssociacaoDisciplinaProjeto", b =>
                {
                    b.HasOne("AvaliadorPI.Domain.RootDisciplina.Disciplina", "Disciplina")
                        .WithMany("AssociacaoDisciplinaProjeto")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AvaliadorPI.Domain.RootProjeto.Projeto", "Projeto")
                        .WithMany("AssociacaoDisciplinaProjeto")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootAdministrador.Administrador", b =>
                {
                    b.HasOne("AvaliadorPI.Domain.RootUsuario.Usuario", "Usuario")
                        .WithOne()
                        .HasForeignKey("AvaliadorPI.Domain.RootAdministrador.Administrador", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootAluno.Aluno", b =>
                {
                    b.HasOne("AvaliadorPI.Domain.RootUsuario.Usuario", "Usuario")
                        .WithOne()
                        .HasForeignKey("AvaliadorPI.Domain.RootAluno.Aluno", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootAvaliacao.Avaliacao", b =>
                {
                    b.HasOne("AvaliadorPI.Domain.RootAluno.Aluno", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoId");

                    b.HasOne("AvaliadorPI.Domain.RootAvaliador.Avaliador", "Avaliador")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("AvaliadorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AvaliadorPI.Domain.RootCriterio.Criterio", "Criterio")
                        .WithMany()
                        .HasForeignKey("CriterioId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AvaliadorPI.Domain.RootGrupo.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId");
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootAvaliador.Avaliador", b =>
                {
                    b.HasOne("AvaliadorPI.Domain.RootUsuario.Usuario", "Usuario")
                        .WithOne()
                        .HasForeignKey("AvaliadorPI.Domain.RootAvaliador.Avaliador", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootCriterio.Criterio", b =>
                {
                    b.HasOne("AvaliadorPI.Domain.RootProjeto.Projeto", "Projeto")
                        .WithMany("Criterios")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootGrupo.Grupo", b =>
                {
                    b.HasOne("AvaliadorPI.Domain.RootProjeto.Projeto", "Projeto")
                        .WithMany("Grupos")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootProfessor.Professor", b =>
                {
                    b.HasOne("AvaliadorPI.Domain.RootUsuario.Usuario", "Usuario")
                        .WithOne()
                        .HasForeignKey("AvaliadorPI.Domain.RootProfessor.Professor", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvaliadorPI.Domain.RootProjeto.Projeto", b =>
                {
                    b.HasOne("AvaliadorPI.Domain.RootProfessor.Professor", "Professor")
                        .WithMany("Projetos")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
